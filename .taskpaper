Implement User Authentication: @status(done)
  - Develop user authentication system with registration and login capabilities. @status(done) @priority(medium)
  - Use Devise (or the most common/modern authentication library). @status(done)
  - Use an RBAC library (e.g., CanCanCan or the current best practice). @status(done)
  - Generate a new controller for logging in; all controllers should be protected by default except the login controller. @status(done)
  - Ensure compatibility with the admin interface (RailsAdmin or the current best/modern admin library). @status(done)
  - The user object should be attached to the resident, but not be the resident itself. Residents may exist without a login. @status(done)
  - The average user is elderly, so keep authentication simple: username/password is fine, and provide magic links for password resets, with a prompt to set a new password after logging in via magic link. @status(done)
  - Ensure users can register, log in, and manage their profiles. Implement role-based access control for admin and regular users. @status(done)
  - Test: Test user registration, login, and role-based access control through unit and integration tests. @status(done)

Develop RESTful APIs for CRUD Operations: @status(done)
  - Create RESTful APIs for managing houses, residents, and users. @status(done) @priority(medium)
  - Implement CRUD operations for House, Resident, and User models using Rails controllers. Ensure APIs adhere to RESTful principles and include necessary validations and error handling. @status(done)
  - Test: Verify all CRUD operations through comprehensive unit and integration tests. @status(done)

Implement Resident Management UI:
  - Develop the user interface for managing resident information with privacy controls. @status(pending) @priority(medium)
  - Minimal privacy controls are needed, except for not exposing sensitive data like plaintext passwords (which Devise does not allow).
  - Bulk actions are fine if supported by the admin framework.
  - Ensure there is a way to view orphaned residents (residents not associated with a house).
  - Create a UI for adding, editing, and removing residents. Implement privacy controls for each resident, allowing users to manage visibility of personal information.
  - Test: Conduct usability testing to ensure the UI is intuitive and privacy controls function as expected.

  - Subtask: Allow residents to hide their birth year
    - Add a boolean field to the Resident model to control birth year visibility @status(done)
    - Update Resident model and queries to respect the hidden birth year flag @status(done)
    - Update UI to provide an option for residents to hide/show their birth year @status(done)
    - Ensure the birth year is hidden wherever resident information is shown if the flag is set @status(done)
    - Add tests to verify birth year hiding functionality @status(done)

  - Subtask: Implement Audit and History Tracking
    - Track changes to resident and house data for accountability and history. @status(pending) @priority(medium)
    - Log all changes (create, update, delete).
    - Include both old and new values for each change.
    - Store audit logs in a database table, viewable from the admin UI.
    - Audit/history should be visible to anyone with the appropriate RBAC permissions (e.g., you, the board, select individuals).
    - Keep audit logs forever (no retention policy needed).
    - Implement a system to log changes to house and resident data, capturing who made changes and when. Ensure this data is accessible through the admin dashboard.

Integrate Groups.io Subscription Data with Resident Records:
  - Connect to the Groups.io API to identify subscribed houses and update resident records accordingly. @status(pending) @priority(medium)
  - Groups.io API credentials are not yet available; plan to store them as Rails secrets.
  - Support multiple mailing lists. Users should be able to subscribe/unsubscribe from the UI (user edit form), which should make direct API calls. The Resident table should store a pointer to the Groups.io record; presence of this pointer means they're subscribed to some list.
  - Initial integration should be a rake task. Output problems to logs, including counts of total DB updates, total emails in Groups.io, and emails that couldn't be associated with a Resident.
  - After initial import, add residents to the mailing list when an email is added. Also, run a nightly task to email you about mismatches (e.g., unsubscribes in Groups.io not reflected in the site).
  - Reference Groups.io API docs: [Login](https://groups.io/api#login), [Authentication](https://groups.io/api#authentication), [Get Members](https://groups.io/api#get_members), [Get Subscriptions](https://groups.io/api#get_subscriptions).
  - Integration requires logging in to obtain a token, then using that token for subsequent API calls.
  - 2FA may require additional work to support automation for the background job.
  - This task involves connecting to the Groups.io API to retrieve a list of email addresses currently subscribed to the neighborhood newsletter. The system should match these email addresses with resident records to determine which houses are subscribed. This requires setting up API authentication with Groups.io, fetching the subscriber list, and developing a matching algorithm to associate emails with resident records. Consider edge cases such as multiple residents with the same email domain or unsubscribed emails. Ensure that the system can handle updates efficiently and can be rerun periodically to refresh the data. This task builds on Task 10, which involves integrating CSV data, by using similar data association techniques.
  - Test: To verify task completion, first ensure that the connection to the Groups.io API is established and that subscriber data can be retrieved successfully. Next, test the matching algorithm with a sample dataset to ensure that email addresses are correctly associated with resident records. Validate that the system correctly updates the subscription status of each house in the resident records. Conduct tests with various scenarios, including houses with multiple residents, to ensure robustness. Finally, perform a full integration test by running the system end-to-end and verifying that the resident records reflect the current subscription status accurately.

Implement Production Deployment Pipeline: @status(done)
  - Set up a deployment pipeline to deploy the application to the production environment after user authentication is implemented. @status(done) @priority(high)
  - This task involves creating a deployment pipeline that automatically deploys the application to the production environment. The deployment should only occur after the user authentication system (Task 3) is successfully implemented and tested. Use a CI/CD tool like Jenkins, GitHub Actions, or GitLab CI to automate the deployment process. Ensure that the deployment pipeline includes steps for building the application, running tests, and deploying to a production server. Consider using Docker for containerization and Kubernetes for orchestration if applicable. Ensure that the deployment process is secure, with access restricted to authorized personnel only. Document the deployment process and provide rollback procedures in case of deployment failure.
  - Test: Verify that the deployment pipeline triggers only after the successful implementation and testing of the user authentication system. Conduct a test deployment to a staging environment first to ensure that the pipeline works as expected. Check that all steps in the pipeline, including build, test, and deployment, execute successfully without errors. Validate that the application is correctly deployed to the production environment and is fully functional, including the authentication features. Perform a security audit to ensure that the deployment process is secure. Test the rollback procedures to ensure they work correctly in case of deployment failure.

Design and Implement Non-Logged-In User Interface: @status(done)
  - Create and implement the user interface for visitors who are not logged into the site. @status(done) @priority(high)
  - This task involves designing the user interface (UI) for visitors who are not logged into the site. The design should be consistent with the overall site theme and provide clear navigation options for logging in, signing up, and accessing public content. Key components include a welcoming homepage, a login/signup page, and any public-facing content or features that should be accessible without authentication. Considerations should include responsive design for mobile and desktop, accessibility standards, and performance optimization. Collaborate with the design team to ensure visual consistency and with the backend team to ensure any necessary data is available for public pages.
  - Test: Verify the UI is consistent with design specifications by conducting a visual inspection on various devices and screen sizes. Test the navigation flow for non-logged-in users to ensure all links and buttons function correctly. Confirm that public content is accessible without login and that login/signup processes redirect appropriately. Conduct accessibility testing to ensure compliance with standards such as WCAG 2.1. Perform performance testing to ensure the pages load efficiently. Gather feedback from stakeholders and make necessary adjustments.

Ensure Full Mobile Responsiveness: @status(done)
  - Optimize the website to be fully responsive and visually appealing on mobile devices. @status(done) @priority(high)
  - Review the current website design and identify areas that do not adapt well to mobile screens. Use CSS media queries to adjust layouts, font sizes, and images for smaller screens. Ensure that touch targets are appropriately sized and that navigation is intuitive on mobile devices. Test the site on various mobile devices and screen sizes, including both iOS and Android platforms. Consider using a mobile-first design approach to enhance performance and user experience on mobile devices. Collaborate with the design team to maintain visual consistency and branding across all devices. @status(done)
  - Test: Test the website on a range of mobile devices with different screen sizes and resolutions, including both iOS and Android devices. Use browser developer tools to simulate mobile views and ensure that all elements are responsive. Verify that navigation is smooth and intuitive, and that all interactive elements are easily accessible and functional. Conduct user testing to gather feedback on the mobile experience and make adjustments as necessary. Confirm that the site passes Google's Mobile-Friendly Test and achieves high scores on performance and accessibility metrics. @status(done)

Enable Resident and Household Member Management: @status(done)
  - Allow residents to add and edit personal and household member details from the main user interface. @status(done) @priority(medium)
  - This task involves extending the existing Resident Management UI to support adding and editing details for both the resident and their household members. The UI should provide clear forms for inputting personal information such as name, age, relationship, and contact details. Ensure that the interface adheres to privacy controls established in Task 6, including data validation and secure handling of sensitive information. Implement client-side validation to ensure data integrity and provide user feedback for any errors. Consider using modal dialogs or dedicated sections within the UI to manage these details efficiently. Additionally, ensure that the backend API supports these operations and that any changes are reflected in real-time on the UI.
  - Test: To verify task completion, conduct both unit and integration testing. Unit tests should cover the UI components responsible for data input and validation. Integration tests should ensure that data is correctly sent to and received from the backend API. Perform user acceptance testing to confirm that the UI is intuitive and that users can successfully add and edit both their own details and those of household members. Verify that privacy controls are enforced and that no unauthorized data access occurs. Additionally, test the system's response to invalid data inputs and ensure appropriate error messages are displayed.
  - Subtasks:
    - Add hidden boolean column to residents table @status(done)
    - Update Resident model and queries for hidden @status(done)
    - Update UI for Hide/Delete buttons for each of the hidable fields @status(done)
    - Add API endpoint to hide residents @status(done)
    - Add delete endpoint for user-created residents @status(pending)
    - Add unhide option in admin UI @status(pending)

Enhance Background Job for Data Conflict Management and Admin Notifications:
  - Improve the background job to handle data conflicts more effectively and send email notifications to the admin when conflicts occur. @status(pending) @priority(medium)
  - This task involves enhancing the existing background job, which is configured using Sidekiq as per Task 7, to better manage data conflicts during nightly imports. The job should be updated to detect conflicts, such as duplicate entries or data discrepancies, and resolve them according to predefined rules (e.g., latest data wins, or manual review required). Additionally, implement functionality to send email notifications to the admin whenever a conflict is detected, providing details about the conflict and any actions taken. This will require integrating with an email service (e.g., SendGrid or SMTP) and ensuring that the admin's email address is configurable via environment variables or a configuration file. Consider logging all conflict occurrences and resolutions for audit purposes.
  - Test: To verify completion, first simulate data conflicts during a test run of the background job and ensure they are detected and handled according to the specified rules. Check that email notifications are sent to the admin with accurate details of the conflict. Validate the email content and ensure it is clear and actionable. Additionally, review logs to confirm that all conflict occurrences and resolutions are recorded correctly. Finally, conduct a code review to ensure that the implementation adheres to best practices and integrates seamlessly with existing systems.

Develop UI for Displaying Unassociated Residents:
  - Create a user interface to display a list of residents who are no longer associated with any house. @status(pending) @priority(medium)
  - This task involves designing and implementing a user interface component within the existing Resident Management UI (from Task 6) to display residents who are not linked to any house. The UI should be intuitive and consistent with the existing design language of the application. It should fetch data from the backend service that provides the list of unassociated residents. Consider using a table or list view to display the residents' names, contact information, and any relevant identifiers. Ensure that the UI is responsive and accessible, adhering to WCAG standards. Collaborate with the backend team to ensure the API endpoint for fetching unassociated residents is available and properly documented. Additionally, implement sorting and filtering options to enhance user experience.
  - Test: To verify the completion of this task, conduct the following tests: 1) Unit test the UI component to ensure it correctly renders the list of unassociated residents. 2) Perform integration testing with the backend API to confirm data is accurately fetched and displayed. 3) Conduct user acceptance testing with stakeholders to ensure the UI meets design and functionality expectations. 4) Validate that the UI is responsive across different devices and screen sizes. 5) Check for accessibility compliance using tools like Axe or Lighthouse to ensure adherence to WCAG standards. 6) Test sorting and filtering functionalities to ensure they work as intended.

Implement UI Filtering Tools for Features: @status(done)
  - Develop tools to filter the user interface by newsletter subscription status, new residents, and upcoming events. @status(done) @priority(medium)
  - This task involves creating a set of filtering tools within the existing user interface to allow users to filter resident data based on specific features: newsletter subscription status, new residents, and upcoming events. The filtering tools should be intuitive and seamlessly integrate with the existing Resident Management UI developed in Task 6. Utilize the data integration from Task 11 to ensure accurate filtering based on newsletter subscription status. Consider using dropdown menus or checkboxes for filtering options, and ensure that the UI updates dynamically as filters are applied. The design should maintain consistency with the current UI/UX standards of the application.
  - Test: To verify task completion, conduct the following tests: 1) Unit test each filter option to ensure it correctly filters the data based on the selected criteria. 2) Perform integration testing with the Resident Management UI to ensure that the filters work seamlessly with existing functionalities. 3) Test the dynamic update of the UI when filters are applied or removed, ensuring no lag or errors occur. 4) Validate that the newsletter subscription filter accurately reflects data from the Groups.io integration. 5) Conduct user acceptance testing with a sample group of users to gather feedback on usability and effectiveness of the filtering tools.

Implement Resident Notification System: @status(done)
  - Develop a notification system to inform residents of changes to their household, with an option to opt out. @status(done) @priority(medium)
  - The task involves creating a notification system that alerts residents about any changes to their household information. This system should integrate with the existing Resident Management UI (from Task 6) to allow residents to manage their notification preferences, including opting out. Notifications can be sent via email or SMS, depending on resident preferences. The system should be designed to handle notifications efficiently, leveraging the background job processing capabilities set up in Task 7. Consideration should be given to privacy and data protection, ensuring that resident data is handled securely and that opt-out preferences are respected. The system should also log notification events for auditing purposes.
  - Test: To verify completion, conduct tests to ensure notifications are sent correctly when household changes occur. Test the integration with the Resident Management UI to confirm residents can opt in or out of notifications. Validate that notifications respect user preferences and that opting out prevents further notifications. Check that notification events are logged appropriately. Perform load testing to ensure the system can handle the expected volume of notifications efficiently. Finally, review the system for compliance with privacy and data protection standards.

Implement Household-Wide Opt-Out for Resident Model Updates: @status(done)
  - Develop a feature allowing users to opt out of all updates to their Resident models for their entire household. @status(done) @priority(medium)
  - This task involves creating a feature in the user interface that allows residents to opt out of receiving updates to their Resident models for their entire household. This feature should be accessible through the user's account settings. When a user opts out, the system should update the database to reflect this preference and ensure no further updates are sent to the user's household. The implementation should consider user authentication to ensure only authorized users can change this setting. Additionally, the system should log these changes for auditing purposes. This task is dependent on Task 19, as it requires the notification system to be in place to manage and track opt-out preferences effectively.
  - Test: To verify the completion of this task, perform the following tests: 1) Unit Test: Verify that the opt-out option is correctly updating the database to reflect the user's preference. 2) Integration Test: Ensure that when a user opts out, no updates are sent to any member of the household. 3) UI Test: Check that the opt-out option is accessible and functional in the user interface. 4) Security Test: Confirm that only authorized users can access and change the opt-out setting. 5) Audit Test: Verify that all opt-out changes are logged correctly for auditing purposes.

Enable Adding Non-PCPAO Residents and Pets: @status(done)
  - Allow users to add residents who are not listed in the PCPAO report, including pets, to the system. @status(done) @priority(medium)
  - This task involves extending the existing Resident Management UI to support the addition of residents who are not part of the PCPAO report. This includes implementing a form where users can manually enter details for new residents and pets. The form should capture necessary information such as name, type (human or pet), contact information, and any other relevant details. Ensure that the UI maintains the privacy controls established in Task 6. Additionally, update the backend to handle the storage and retrieval of these manually added residents and pets, ensuring data integrity and security. Consider adding validation to prevent duplicate entries and ensure data consistency.
  - Test: To verify the completion of this task, conduct the following tests: 1) UI Test: Ensure the form for adding new residents and pets is accessible and functions correctly within the Resident Management UI. 2) Data Entry Test: Add a variety of residents and pets, checking that all fields accept input and store data correctly. 3) Privacy Test: Verify that the privacy controls from Task 6 are enforced for manually added residents and pets. 4) Backend Test: Check that the backend correctly stores and retrieves the manually added data, and that no data corruption occurs. 5) Validation Test: Attempt to add duplicate entries and ensure the system prevents this, maintaining data integrity.

Implement Name Search Feature in UI: @status(done)
  - Add a real-time name search feature to the UI, allowing users to filter residents by name as they type. @status(done) @priority(medium)
  - To implement the name search feature, first extend the existing UI to include a search input field at the top of the resident list. Use JavaScript to listen for input events on this field and filter the displayed list of residents in real time. This can be achieved by applying a filter function to the resident data array, matching the input string against resident names. Ensure the search is case-insensitive and handles partial matches. Update the UI dynamically to reflect the filtered results without requiring a page reload. Consider using a debounce function to optimize performance and reduce unnecessary re-renders during fast typing. Ensure the feature integrates seamlessly with existing UI components and adheres to the privacy controls established in Task 6.
  - Test: 1. Verify that the search input field is present and correctly positioned in the UI.
    2. Test typing various names into the search field and confirm that the resident list updates in real time to show only matching results.
    3. Check that the search is case-insensitive and supports partial matches.
    4. Ensure that the UI remains responsive and performs efficiently during rapid typing.
    5. Validate that the search feature respects privacy settings and does not expose any restricted information.
    6. Conduct user testing to ensure the feature is intuitive and meets user needs.

Production Environment Setup and Maintenance:
  - Configure and maintain production environment for reliable operation. @status(pending) @priority(high)
  - Subtasks:
    - Enable and configure email delivery in production @status(pending)
      - Set up SMTP configuration
      - Test email delivery
      - Configure email templates
    - Implement automated database backup system @status(pending)
      - Set up daily automated backups
      - Configure backup retention policy
      - Test backup integrity
    - Create database restore tool @status(pending)
      - Develop user-friendly restore interface
      - Implement restore validation
      - Document restore procedures
    - Test production user management with Matt @status(pending)
      - Verify user creation process
      - Test role assignment
      - Document user management procedures
    - Create script to generate users for CSV-imported residents @status(pending)
      - Develop user generation script
      - Add email validation
      - Include password reset instructions
    - Implement first_seen_at population script @status(in-progress)
      - Analyze existing data
      - Create migration script
      - Verify data accuracy
    - Resolve SSL configuration issues @status(pending)
      - Debug current SSL setup
      - Implement proper certificate handling
      - Test secure connections
    - Add credentials to board vault @status(pending)
      - Document all required credentials
      - Set up secure storage
      - Create access procedures
    - Add resident type indicators @status(pending)
      - Implement emoji/heroicon support for residents
      - Add UI controls for setting indicators
      - Update resident display to show indicators
      - Test: Verify that indicators are properly displayed and managed in the UI
      - Test: Ensure indicators are preserved during data imports
      - Test: Validate that indicators are included in exports

User Email Management:
  - Implement UI/logic for users to change their login email (User.email) separate from display email (Resident.email) @status(pending) @priority(medium)
    - Both fields exist intentionally for privacy/flexibility reasons
    - Users should be able to update their login credentials when needed
    - Consider security implications (email verification, etc.)
    - Design UI that clearly distinguishes between login email vs display email
