---
description:
globs:
alwaysApply: true
---
# Testing Guidelines

- ALWAYS run the specs and rubocop after changes
- ALL changes require new specs to be written (or request specs to be modified)
- Run utilities with these commands:
  + For unit, request, and feature specs: `bin/rspec` or `bin/rspec <filename>[:<filenumber>]
  + For linting: `bin/rubocop`
  + For other things like migrations `RAILS_ENV=test bin/rails`
  + You CANNOT run `bin/rails console`, it does not work. Use `bin/rails runner` instead

## RSpec Best Practices
- Follow Sandi Metz's testing principles
- Test objects in isolation
- Mock collaborators if at all possible
- Test public interfaces

## Mocking Strategy
- Use RSpec mocks with `and_call_original` for partial mocking
- Only mock the methods you need to control
- Let other methods behave normally
- Only use `instance_double`, NEVER USE `double`
- WebMock is configured globally to prevent accidental network calls

## Example Unit Test Structure
```ruby
RSpec.describe MyClass do
  let(:my_object) { described_class.new }

  describe '#my_method' do
    context 'when successful' do
      let(:collaborator) { instance_double(Collaborator) }

      before do
        allow(collaborator).to receive(:some_method).and_return(result)
        allow(collaborator).to receive(:other_method).and_call_original
      end

      it 'does something' do
        # test code
      end
    end
  end
end
```

## Example Request Spec Structure (aka Controller spec, controller test, integration test)
Request specs follow Sandi-style and are only concerned with:
* Status codes
* Logic strictly within the controller action
* Mocked calls to other classes

Notes
* Do not create database objects unless strictly needed (for instance, for auth)
* Try to minimize the number of distinct request specs; it's okay to have multiple expectations in one request spec.

### Example Request Spec
```ruby
require 'rails_helper'

# Controller-level test that avoids hitting the DB except for Deviseâ€™s user.
RSpec.describe Api::ResidentsController, type: :request do
  let(:user) { create(:user) }                  # the one unavoidable DB record
  let(:resident_id) { 42 }                      # any ID; no record exists
  let(:resident) { instance_double(Resident, id: resident_id) }

  before do
    sign_in user                                # Devise helper

    # Stub the lookup the controller does in before_action :set_resident
    allow(Resident).to receive(:find).with(resident_id.to_s).and_return(resident)
  end

  describe 'PATCH /api/residents/:id' do
    let(:params) { { resident: { display_name: 'New Name' } } }

    it 'delegates to the update service and returns 200' do
      service_double = instance_double(ResidentUpdateService, call: true)
      allow(ResidentUpdateService).to receive(:new)
        .with(resident, params[:resident])
        .and_return(service_double)

      patch "/api/residents/#{resident_id}", params: params

      expect(response).to have_http_status(:ok)
      expect(service_double).to have_received(:call)
    end
  end

  describe 'GET /api/residents/:id' do
    it 'serialises and returns the resident' do
      serializer_double = instance_double(ResidentSerializer, as_json: { id: resident_id, display_name: 'Stub Name' })
      allow(ResidentSerializer).to receive(:new).with(resident).and_return(serializer_double)

      get "/api/residents/#{resident_id}"

      expect(response).to have_http_status(:ok)
      expect(JSON.parse(response.body)).to eq('id' => 42, 'display_name' => 'Stub Name')
    end
  end
end
```

## Key Test Files
- [spec_helper.rb](mdc:spec/spec_helper.rb) - Global rspec config
- [rails_helper.rb](mdc:spec/rails_helper.rb) - Rspec config for things that require a database connection, most often for integration tests
